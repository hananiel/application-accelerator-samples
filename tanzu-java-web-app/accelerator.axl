engine {

  applyTo("README.md") {
    TextPreprocessor()
  }

  // Include files for the selected build tool
  if (#buildTool == "maven") {
    Exclude({"*gradle*"})
    + InvokeFragment(reference: "build-wrapper-maven")
  }
  if (#buildTool == "gradle") {
    applyTo("settings.gradle") {
      ReplaceText({{text: "tanzu-java-web-app", with: #projectName}})  
    }
    {
      Exclude({"pom.xml"})
      + InvokeFragment(reference: "build-wrapper-gradle")
    }
  }

  // Update the artifact name as needed
  applyTo("README.md") {
    ReplaceText({{text: "tanzu-java-web-app", with: #artifactId.toLowerCase()}})
  }

  // Update the artifact name and path as needed
  applyTo(".tanzu/config/tanzu-java-web-app.yml") {
    ReplaceText({{text: "tanzu-java-web-app", with: #artifactId.toLowerCase()}})
    RewritePath(rewriteTo: '.tanzu/config/' + #artifactId.toLowerCase() + '.yml')
  }
  applyTo(".tanzu/config/httproute-tanzu-java-web-app.yml") {
    ReplaceText({{text: "tanzu-java-web-app", with: #artifactId.toLowerCase()}})
    RewritePath(rewriteTo: '.tanzu/config/httproute-' + #artifactId.toLowerCase() + '.yml')
  }

  // Update the configuration id
  let uuid = T(java.util.UUID).randomUUID() in {
    applyTo("tanzu.yml") {
      OpenRewriteRecipe('org.openrewrite.yaml.ChangeValue', { oldKeyPath: "$.configuration.id", value: 'config-' + #uuid.toString()})
    }
  }

  {
    Include({'**'})
    // Update the java version
    + InvokeFragment(reference: "java-version")
  }
  UniquePath(strategy: UseLast)

  // Create the provenance file
  Provenance()

}